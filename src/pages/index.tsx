import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useDropzone } from "react-dropzone";
import { parse } from "papaparse";
import { useCallback, useState } from "react";
const Home: NextPage = () => {
  // users contains all the data from sqlite / Prisma!
  // Plus its typesafe :D
  const users = trpc.example.getAll.useQuery();

  return (
    <>
      <Head>
        <title>Indigov CSV Reader</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          Indigov CSV Reader
        </h1>
        <FileDropZone />

        <div className="flex flex-col items-center justify-center">
          {users?.data?.map((item) => {
            const { email, firstName, lastName, zipcode } = item;
            return (
              <UserCard
                // We want the key to be unique between renders
                key={`userCard-${email}`}
                email={email}
                firstName={firstName}
                lastName={lastName}
                zipCode={zipcode}
              />
            );
          })}

          <UserCard
            email="test@abc.com"
            firstName="Mike"
            lastName="Meyers"
            zipCode="123456"
          />
          <UserCard
            email="test@abc.com"
            firstName="Mike"
            lastName="Meyers"
            zipCode="123456"
          />
        </div>
      </main>
    </>
  );
};

export default Home;

type UserCardProps = {
  email: string;
  firstName: string;
  lastName: string;
  zipCode: string;
};

const UserCard = ({ email, firstName, lastName, zipCode }: UserCardProps) => {
  return (
    <section className="my-2 flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{`${firstName} ${lastName}`}</h2>
      <p className="text-sm text-gray-600">{email}</p>
      <p className="text-sm text-gray-600">{zipCode}</p>
    </section>
  );
};

const FileDropZone = () => {
  const [fileData, setFileData] = useState<any>([]);

  const saveUser = useCallback(() => {
    // write each user to prisma
    fileData.forEach(async (user: any) => {
      await prisma?.user.create({
        data: {
          email: user?.Email,
          firstName: user?.FirstName,
          lastName: user?.LastName,
          zipcode: user?.ZipCode,
        },
      });
    });
  }, []);

  const onDrop = useCallback(async (acceptedFiles: any) => {
    console.log("DROPPED");
    acceptedFiles.forEach(async (file: any) => {
      const text = await file?.text();
      const result = parse(text, { header: true });
      // Each row should now be the key of the object
      setFileData(result);
    });
  }, []);
  const { getRootProps, getInputProps } = useDropzone({
    onDrop,
    accept: {
      "text/csv": [".csv"],
    },
  });

  return fileData?.length === 0 ? (
    <div
      {...getRootProps()}
      className=" flex  flex-col items-center justify-center border-2 border-dashed border-black p-6"
    >
      <input {...getInputProps()} />
      <span className="my-2">Drag and Drop File here!</span>
      <span className="my-2">Or</span>
      <button className="my-2 rounded-lg bg-purple-600 px-4 py-2 text-white">
        Click to select file
      </button>
    </div>
  ) : (
    <div>
      <span>Here is what you submitted ðŸ˜„ </span>
      {/* Map over the file and display what we parsed from the file */}
      {/* {fileData.map((item) => {
        const {};
      })} */}

      {/* If that looks good allow the user to save and write to the database */}
      <button onClick={saveUser}>Save</button>
    </div>
  );
};
